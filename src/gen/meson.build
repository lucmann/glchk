api_xml_files = files(
    'gl_API.xml',
    'es_EXT.xml',
    'gl_and_es_API.xml',
    'gl_and_glX_API.xml',
    'ARB_base_instance.xml',
    'ARB_blend_func_extended.xml',
    'ARB_bindless_texture.xml',
    'ARB_clear_buffer_object.xml',
    'ARB_clear_texture.xml',
    'ARB_clip_control.xml',
    'ARB_color_buffer_float.xml',
    'ARB_compressed_texture_pixel_storage.xml',
    'ARB_compute_shader.xml',
    'ARB_compute_variable_group_size.xml',
    'ARB_copy_buffer.xml',
    'ARB_copy_image.xml',
    'ARB_debug_output.xml',
    'ARB_depth_buffer_float.xml',
    'ARB_depth_clamp.xml',
    'ARB_direct_state_access.xml',
    'ARB_draw_buffers.xml',
    'ARB_draw_buffers_blend.xml',
    'ARB_draw_elements_base_vertex.xml',
    'ARB_draw_indirect.xml',
    'ARB_draw_instanced.xml',
    'ARB_ES2_compatibility.xml',
    'ARB_ES3_compatibility.xml',
    'ARB_framebuffer_no_attachments.xml',
    'ARB_framebuffer_object.xml',
    'ARB_get_program_binary.xml',
    'ARB_get_texture_sub_image.xml',
    'ARB_gl_spirv.xml',
    'ARB_gpu_shader_fp64.xml',
    'ARB_gpu_shader_int64.xml',
    'ARB_gpu_shader5.xml',
    'ARB_indirect_parameters.xml',
    'ARB_instanced_arrays.xml',
    'ARB_internalformat_query.xml',
    'ARB_internalformat_query2.xml',
    'ARB_invalidate_subdata.xml',
    'ARB_map_buffer_range.xml',
    'ARB_multi_bind.xml',
    'ARB_pipeline_statistics_query.xml',
    'ARB_program_interface_query.xml',
    'ARB_robustness.xml',
    'ARB_sample_shading.xml',
    'ARB_sampler_objects.xml',
    'ARB_seamless_cube_map.xml',
    'ARB_separate_shader_objects.xml',
    'ARB_shader_atomic_counters.xml',
    'ARB_shader_image_load_store.xml',
    'ARB_shader_subroutine.xml',
    'ARB_shader_storage_buffer_object.xml',
    'ARB_sparse_buffer.xml',
    'ARB_spirv_extensions.xml',
    'ARB_sync.xml',
    'ARB_tessellation_shader.xml',
    'ARB_texture_barrier.xml',
    'ARB_texture_buffer_object.xml',
    'ARB_texture_buffer_range.xml',
    'ARB_texture_compression_rgtc.xml',
    'ARB_texture_cube_map_array.xml',
    'ARB_texture_float.xml',
    'ARB_texture_gather.xml',
    'ARB_texture_multisample.xml',
    'ARB_texture_rgb10_a2ui.xml',
    'ARB_texture_rg.xml',
    'ARB_texture_storage_multisample.xml',
    'ARB_texture_storage.xml',
    'ARB_texture_view.xml',
    'ARB_uniform_buffer_object.xml',
    'ARB_vertex_array_object.xml',
    'ARB_vertex_attrib_64bit.xml',
    'ARB_vertex_attrib_binding.xml',
    'ARB_viewport_array.xml',
    'AMD_depth_clamp_separate.xml',
    'AMD_draw_buffers_blend.xml',
    'AMD_gpu_shader_int64.xml',
    'AMD_performance_monitor.xml',
    'ARB_vertex_type_2_10_10_10_rev.xml',
    'APPLE_object_purgeable.xml',
    'APPLE_vertex_array_object.xml',
    'EXT_direct_state_access.xml',
    'EXT_draw_buffers2.xml',
    'EXT_external_objects.xml',
    'EXT_external_objects_fd.xml',
    'EXT_framebuffer_object.xml',
    'EXT_gpu_shader4.xml',
    'EXT_multisampled_render_to_texture.xml',
    'EXT_packed_depth_stencil.xml',
    'EXT_provoking_vertex.xml',
    'EXT_separate_shader_objects.xml',
    'EXT_shader_image_load_store.xml',
    'EXT_texture_array.xml',
    'EXT_texture_integer.xml',
    'EXT_transform_feedback.xml',
    'EXT_vertex_attrib_64bit.xml',
    'EXT_window_rectangles.xml',
    'GREMEDY_string_marker.xml',
    'INTEL_performance_query.xml',
    'KHR_debug.xml',
    'KHR_context_flush_control.xml',
    'KHR_robustness.xml',
    'KHR_robustness_es.xml',
    'KHR_texture_compression_astc.xml',
    'NV_alpha_to_coverage_dither_control.xml',
    'NV_copy_image.xml',
    'NV_conditional_render.xml',
    'NV_primitive_restart.xml',
    'NV_texture_barrier.xml',
    'NV_vdpau_interop.xml',
    'NV_viewport_swizzle.xml',
    'OES_EGL_image.xml',
    'OES_fixed_point.xml',
    'OES_single_precision.xml',
    'OES_texture_compression_astc.xml',
    'GL3x.xml',
    'GL4x.xml',
)

glapi_gen_depends = files(
    'gl_XML.py',
    'static_data.py',
    'typeexpr.py',
) + api_xml_files

glapitable_h = custom_target(
    'glapitable.h',
    input : ['gl_table.py', 'gl_API.xml'],
    output : 'glapitable.h',
    command : [prog_python, '@INPUT0@', '-f', '@INPUT1@'],
    depend_files : glapi_gen_depends,
    capture : true,
)

gl_dl_c = custom_target(
    'gldl.c',
    input : ['gl_dl.py', 'gl_API.xml'],
    output : 'gldl.c',
    command : [prog_python, '@INPUT0@', '-f', '@INPUT1@'],
    depend_files : glapi_gen_depends,
    capture : true,
)
